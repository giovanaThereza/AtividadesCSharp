<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        OVFBXOcCuc4HOc4HOc4HOc4HOc4H/9k=
</value>
  </data>
</root>